////////////////////////////////////////////////////////////////////////////////
// Company:        ENSIMAG
// Engineer:       Florentin GONTHIER, Ojeme IKHALO, Julien BONNARDEL
// 
// Module Name:    MAIN header for Catapult C 
// Project Name:   JPEG2000 & HLS
//
////////////////////////////////////////////////////////////////////////////////

#include "Main_Codage_Arith.h"
//#include "math.h"

#pragma design top

Mn_Codage_Arith::Mn_Codage_Arith()
{
}

void Mn_Codage_Arith::Mn_Fonction(uint16 width, uint16 height, uint4 nblevels,
                                  ac_int<8, false> Src [HEIGHT_IMAGE * WIDTH_IMAGE], Band *bands)
{
	Mn_Create_Band(width, height, nblevels, Src, bands);
	Mn_Do_Job(nblevels, Src, bands)	;
}

void Mn_Codage_Arith::Mn_Create_Band(
    uint16 width, uint16 height, uint4 nblevels,
    ac_int<8, false> Src[HEIGHT_IMAGE * WIDTH_IMAGE], Band *bands)
{

	void setBand(uint16 Topx, uint16 Topy, uint8 width, uint8 height,
	             uint4 level, ac_int<8, false> Src[HEIGHT_IMAGE * WIDTH_IMAGE]);
	const uint4 orgx = 0; // origin on the x axis
	const uint4 orgy = 0; // origin on the x axis
	uint8 num_band = 0;
	uint4 lvl = nblevels - 1;
	int wband = WIDTH_IMAGE >> (lvl + 1); // band width
	int hband = HEIGHT_IMAGE >>  (lvl + 1); // band height
	int check_height = hband;
	int check_width = wband;

	// 1st band : the smaller one in the top left corner
	bands[num_band++].setBand(orgx, orgy, wband, hband, lvl, Src);
	for (uint4 i = 0; i < nblevels; i++) { // on fait les 3
	
		wband = WIDTH_IMAGE >> (lvl + 1);
		hband = HEIGHT_IMAGE >> (lvl + 1);

		check_width += wband;
		check_height += hband;

		// top right corner band of the level
		bands[num_band++].setBand(wband, orgy, wband, hband, lvl, Src);
		// bottom left corner band of the level
		bands[num_band++].setBand(orgx, hband, wband, hband, lvl, Src);
		// bottom right corner band of the level
		bands[num_band++].setBand(wband, hband, wband, hband, lvl, Src);

		--lvl;
	}
}

void Mn_Codage_Arith::Mn_Do_Job(uint4 nblvl, ac_int<8, false> *Src, Band *bands)
{
	for (int i = 0; i <= (3 * nblvl); i++) {
		bands[i].initTable();
		bands[i].fillWord();
	}
}
