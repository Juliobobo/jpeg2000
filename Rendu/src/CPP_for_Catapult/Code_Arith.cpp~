//
// Created by florentin on 15/11/16.
//

#include "Code_Arith.h"

Code_Arith::Code_Arith()
{
	for (int i = 0; i < 16; ++i) {
		tableau_Value[i] = Arith_Case();
	}
}

Arith_Case Code_Arith::getCase(uint4 Id)
{
	// std::cout << "Id : "<< Id <<std::endl;
	return tableau_Value[Id];
}

uint16 Code_Arith::total_Occurence()
{
	uint16 stock = 0;
	for (int i = 0; i < 16; i++) {
		stock += tableau_Value[i].getApparition();
	}
	return stock;
}

void Code_Arith::fill_table(uint16 *occurence)
{
	for (int i = 0; i < 16; i++) {
		tableau_Value[i] = Arith_Case(occurence[i]);
	}
}

void Code_Arith::add_element(uint4 element)
{
	tableau_Value[element].increment_Apparition();
}

void Code_Arith::set_Interval()
{
	ac_fixed<32, 16, false> total =
	    ac_fixed<32, 16, false>(this->total_Occurence());
	tableau_Value[0].set_Start(0);
	ac_fixed<32, 16, false> apparition =
	    ac_fixed<32, 16, false>(tableau_Value[0].getApparition());
	ac_fixed<16, 0, false> tmp;
	if (total != 0)
		tmp = (apparition / total);
	else {
		std::cerr << "Division par 0 !\n";
		return;
	}
	tableau_Value[0].set_End(tmp);
	for (int i = 0; i < 16; i++) {
		tableau_Value[i].set_Start(tableau_Value[i - 1].get_End());
		apparition = ac_fixed<32, 16, false>(tableau_Value[i].getApparition());
		tmp = (apparition / total);
		tableau_Value[i].set_End(tableau_Value[i].get_Start() + tmp);
	}
}
