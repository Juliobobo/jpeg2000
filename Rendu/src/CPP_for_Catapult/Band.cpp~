//
// Created by florentin on 21/01/17.
//

#include "Band.h"

Band::Band()
    : level(0), coorTopx(0), coorTopy(0), width(0), height(0), table(), blocks()
{
}

void Band::setBand(uint16 Topx, uint16 Topy, uint8 width, uint8 height,
                   uint4 level, ac_int<8, false> *Src)
{
	std::cout << "x: " << Topx << " y: " << Topy << " width: " << width
	          << " col: " << height << " level:" << level << std::endl;
	coorTopx = Topx;
	coorTopy = Topy;
	this->height = height;
	this->width = width;
	this->level = level;


	if (level == 0) {
		for (uint8 i = 0; i < 10 * 8; i++) {
			uint16 minx = Topx + (16 * i) % 160;
			uint16 miny = Topy + (16 * (i / 10));
			uint16 maxx = minx + 15;
			if (minx > Topx + width) {
				minx = Topx + width;
			}
			uint16 maxy = miny + 15;
			if (maxy > Topy + height) {
				maxy = Topy + height;
			}
			blocks[i].init_Block(Src, minx, miny, maxx, maxy);
		}
	}
	if (level == 1) {
		for (uint8 i = 0; i < 5 * 4; i++) {
			uint16 minx = Topx + (16 * i) % (16 * 5);
			uint16 miny = Topy + (16 * (i / 5));
			uint16 maxx = minx + 15;
			if (minx > Topx + width) {
				minx = Topx + width;
			}
			uint16 maxy = miny + 15;
			if (maxy > Topy + height) {
				maxy = Topy + height;
			}
			blocks[i].init_Block(Src, minx, miny, maxx, maxy);
		}
	}
	if (level == 2) {
		for (uint4 i = 0; i < 3 * 2; i++) {
			uint16 minx = Topx + (16 * i) % (16 * 3);
			uint16 miny = Topy + (16 * (i / 3));
			uint16 maxx = minx + 15;
			if (minx > Topx + width) {
				minx = Topx + width;
			}
			uint16 maxy = miny + 15;
			if (maxy > Topy + height) {
				maxy = Topy + height;
			}
			blocks[i].init_Block(Src, minx, miny, maxx, maxy);
		}
	}
	if (level == 3) {
		for (uint4 i = 0; i < 2 * 1; i++) {
			uint16 minx = Topx + (16 * i) % (16 * 2);
			uint16 miny = Topy + (16 * (i / 2));
			uint16 maxx = minx + 15;
			if (minx > Topx + width) {
				minx = Topx + width;
			}
			uint16 maxy = miny + 15;
			if (maxy > Topy + height) {
				maxy = Topy + height;
			}
			blocks[i].init_Block(Src, minx, miny, maxx, maxy);
		}
	}
}

void Band::initTable()
{
	if (level == 0) {
		for (uint8 i = 0; i < 10 * 8; i++) {
			uint4 *tmp = blocks[i].getValue();
			for (uint16 j = 0; j < blocks[i].getReal(); j++) {
				table.add_element(tmp[j]);
			}
		}
	}
	if (level == 1) {
		for (uint8 i = 0; i < 5 * 4; i++) {
			uint4 *tmp = blocks[i].getValue();
			for (uint16 j = 0; j < blocks[i].getReal(); j++) {
				table.add_element(tmp[j]);
			}
		}
	}
	if (level == 2) {
		for (uint4 i = 0; i < 3 * 2; i++) {
			uint4 *tmp = blocks[i].getValue();
			for (uint16 j = 0; j < blocks[i].getReal(); j++) {
				table.add_element(tmp[j]);
			}
		}
	}
	if (level == 3) {
		for (uint4 i = 0; i < 2 * 1; i++) {
			uint4 *tmp = blocks[i].getValue();
			for (uint16 j = 0; j < blocks[i].getReal(); j++) {
				table.add_element(tmp[j]);
			}
		}
	}
	table.set_Interval();
}

void Band::fillWord()
{
	if (level == 0) {
		for (uint8 i = 0; i < 10 * 8; i++) {
			blocks[i].fill_Word(table);
		}
	}
	if (level == 1) {
		for (uint8 i = 0; i < 5 * 4; i++) {
			blocks[i].fill_Word(table);
		}
	}
	if (level == 2) {
		for (uint4 i = 0; i < 3 * 2; i++) {
			blocks[i].fill_Word(table);
		}
	}
	if (level == 3) {
		for (uint4 i = 0; i < 2 * 1; i++) {
			blocks[i].fill_Word(table);
		}
	}
}
