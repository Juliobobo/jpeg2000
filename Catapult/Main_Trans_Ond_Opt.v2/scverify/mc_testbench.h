// ----------------------------------------------------------------------------
// SystemC Testbench Header
//
//    HLS version: 2011a.200 Production Release
//       HLS date: Mon Jun  2 22:10:04 PDT 2014
//  Flow Packages: HDL_Tcl 2008a.1, SCVerify 2009a.1
//
//   Generated by: xph3sle512@cimeld16
// Generated date: Tue Dec 13 10:28:16 CET 2016
//
// ----------------------------------------------------------------------------
#ifdef CCS_SCVERIFY

// 
// -------------------------------------
// testbench
// User supplied testbench
// -------------------------------------
// 
#ifndef INCLUDED_TESTBENCH_H
#define INCLUDED_TESTBENCH_H

extern void mc_testbench_Src_skip(bool v);
extern void mc_testbench_Dst_skip(bool v);
extern void mc_testbench_Vga_skip(bool v);
extern void mc_testbench_nbLevels_skip(bool v);

#ifndef SC_USE_STD_STRING
#define SC_USE_STD_STRING
#endif

#include "../../Rendu/src/CPP_for_Catapult/Main_Trans_Ond_opt.h"
#include <systemc.h>
#include <tlm.h>
#include <ac_int.h>
#include <mc_container_types.h>
#include <mc_typeconv.h>
#include <mc_transactors.h>
#include <mc_comparator.h>
#include <mc_end_of_testbench.h>
#include <vector>


class testbench : public sc_module
{
public:
   // Interface Ports
   sc_in< bool > clk;
   sc_port< tlm::tlm_fifo_put_if< mgc_sysc_ver_array1D<ac_int<8, false >,76800> > > ccs_Src_IN;
   sc_port< tlm::tlm_fifo_put_if< mc_wait_ctrl > > ccs_wait_ctrl_Src_IN;
   sc_port< tlm::tlm_fifo_get_if< mgc_sysc_ver_array1D<ac_int<8, false >,76800> > > ccs_Src;
   sc_port< tlm::tlm_fifo_put_if< mc_wait_ctrl > > ccs_wait_ctrl_Src;
   sc_port< tlm::tlm_fifo_put_if< mgc_sysc_ver_array1D<ac_int<8, false >,76800> > > ccs_Dst_IN;
   sc_port< tlm::tlm_fifo_put_if< mc_wait_ctrl > > ccs_wait_ctrl_Dst_IN;
   sc_port< tlm::tlm_fifo_get_if< mgc_sysc_ver_array1D<ac_int<8, false >,76800> > > ccs_Dst;
   sc_port< tlm::tlm_fifo_put_if< mc_wait_ctrl > > ccs_wait_ctrl_Dst;
   sc_port< tlm::tlm_fifo_get_if< mgc_sysc_ver_array1D<ac_int<8, false >,76800> > > ccs_Vga;
   sc_port< tlm::tlm_fifo_put_if< mc_wait_ctrl > > ccs_wait_ctrl_Vga;
   sc_port< tlm::tlm_fifo_put_if< ac_int<3, false > > > ccs_nbLevels;
   sc_port< tlm::tlm_fifo_put_if< mc_wait_ctrl > > ccs_wait_ctrl_nbLevels;
   
   // Data objects
   bool testbench_ended;
   int main_exit_code;
   bool atleast_one_active_input;
   sc_time last_event_time;
   sc_time last_event_time2;
   sc_signal< bool >                          cpp_testbench_active;
   sc_event testbench_end_event;
   int argc;
   const char* const *argv;
   bool _checked_results;
   bool _failed;
   static testbench* that;
   static std::vector<mc_end_of_testbench*> _end_of_tb_objs;
   int main();
   static bool Src_ignore;
   static bool Src_skip;
   static int Src_array_comp_first;
   static int Src_array_comp_last;
   bool _capture_Src_IN;
   static int Src_IN_wait_cycles;
   static mc_wait_ctrl Src_IN_wait_ctrl;
   int Src_IN_capture_count;
   int Src_IN_iteration_count;
   static bool Src_use_mask;
   static ac_int<8, false > Src_output_mask;
   tlm::tlm_fifo< mc_golden_info< mgc_sysc_ver_array1D<ac_int<8, false >,76800>, ac_int<8, false > > > Src_golden;
   bool _capture_Src;
   static int Src_wait_cycles;
   static mc_wait_ctrl Src_wait_ctrl;
   int Src_capture_count;
   int Src_iteration_count;
   static bool Dst_ignore;
   static bool Dst_skip;
   static int Dst_array_comp_first;
   static int Dst_array_comp_last;
   bool _capture_Dst_IN;
   static int Dst_IN_wait_cycles;
   static mc_wait_ctrl Dst_IN_wait_ctrl;
   int Dst_IN_capture_count;
   int Dst_IN_iteration_count;
   static bool Dst_use_mask;
   static ac_int<8, false > Dst_output_mask;
   tlm::tlm_fifo< mc_golden_info< mgc_sysc_ver_array1D<ac_int<8, false >,76800>, ac_int<8, false > > > Dst_golden;
   bool _capture_Dst;
   static int Dst_wait_cycles;
   static mc_wait_ctrl Dst_wait_ctrl;
   int Dst_capture_count;
   int Dst_iteration_count;
   static bool Vga_ignore;
   static bool Vga_skip;
   static int Vga_array_comp_first;
   static int Vga_array_comp_last;
   static bool Vga_use_mask;
   static ac_int<8, false > Vga_output_mask;
   tlm::tlm_fifo< mc_golden_info< mgc_sysc_ver_array1D<ac_int<8, false >,76800>, ac_int<8, false > > > Vga_golden;
   bool _capture_Vga;
   static int Vga_wait_cycles;
   static mc_wait_ctrl Vga_wait_ctrl;
   int Vga_capture_count;
   int Vga_iteration_count;
   static bool nbLevels_ignore;
   static bool nbLevels_skip;
   static int nbLevels_array_comp_first;
   static int nbLevels_array_comp_last;
   bool _capture_nbLevels;
   static int nbLevels_wait_cycles;
   static mc_wait_ctrl nbLevels_wait_ctrl;
   int nbLevels_capture_count;
   int nbLevels_iteration_count;
   int wait_cnt;
   
   // Named Objects
   
   // Module instance pointers
   mc_comparator< mgc_sysc_ver_array1D<ac_int<8, false >,76800> , ac_int<8, false > > *Src_comp;
   mc_comparator< mgc_sysc_ver_array1D<ac_int<8, false >,76800> , ac_int<8, false > > *Dst_comp;
   mc_comparator< mgc_sysc_ver_array1D<ac_int<8, false >,76800> , ac_int<8, false > > *Vga_comp;
   
   // Declare processes (SC_METHOD and SC_THREAD)
   void wait_for_end();
   void run();
   
   // Constructor
   SC_HAS_PROCESS(testbench);
   testbench(
      const sc_module_name& name
   )
      : clk("clk")
      , ccs_Src_IN("ccs_Src_IN")
      , ccs_wait_ctrl_Src_IN("ccs_wait_ctrl_Src_IN")
      , ccs_Src("ccs_Src")
      , ccs_wait_ctrl_Src("ccs_wait_ctrl_Src")
      , ccs_Dst_IN("ccs_Dst_IN")
      , ccs_wait_ctrl_Dst_IN("ccs_wait_ctrl_Dst_IN")
      , ccs_Dst("ccs_Dst")
      , ccs_wait_ctrl_Dst("ccs_wait_ctrl_Dst")
      , ccs_Vga("ccs_Vga")
      , ccs_wait_ctrl_Vga("ccs_wait_ctrl_Vga")
      , ccs_nbLevels("ccs_nbLevels")
      , ccs_wait_ctrl_nbLevels("ccs_wait_ctrl_nbLevels")
      , cpp_testbench_active("cpp_testbench_active")
      , Src_golden("Src_golden",-1)
      , Dst_golden("Dst_golden",-1)
      , Vga_golden("Vga_golden",-1)
   {
      // Instantiate other modules
      Src_comp = new mc_comparator< mgc_sysc_ver_array1D<ac_int<8, false >,76800> , ac_int<8, false > > (
         "Src_comp",
         0,
         1
      );
      Src_comp->data_in(ccs_Src);
      Src_comp->data_golden(Src_golden);
      
      Dst_comp = new mc_comparator< mgc_sysc_ver_array1D<ac_int<8, false >,76800> , ac_int<8, false > > (
         "Dst_comp",
         0,
         1
      );
      Dst_comp->data_in(ccs_Dst);
      Dst_comp->data_golden(Dst_golden);
      
      Vga_comp = new mc_comparator< mgc_sysc_ver_array1D<ac_int<8, false >,76800> , ac_int<8, false > > (
         "Vga_comp",
         0,
         1
      );
      Vga_comp->data_in(ccs_Vga);
      Vga_comp->data_golden(Vga_golden);
      
      
      // Register processes
      SC_METHOD(wait_for_end);
      sensitive << clk.pos() << testbench_end_event;
      SC_THREAD(run);
      // Other constructor statements
      set_stack_size(64000000);
      argc = sc_argc();
      argv = sc_argv();
      _checked_results = false;
      that = this;
      testbench_ended = false;
      main_exit_code = 0;
      atleast_one_active_input = true;
      _capture_Src_IN = true;
      _capture_Src = true;
      _capture_Dst_IN = true;
      _capture_Dst = true;
      _capture_Vga = true;
      _capture_nbLevels = true;
      wait_cnt = 0;
   }
   
   ~testbench()
   {
      delete Src_comp;
      Src_comp = 0;
      delete Dst_comp;
      Dst_comp = 0;
      delete Vga_comp;
      Vga_comp = 0;
   }
   
   // C++ class functions
   public:
      void mc_testbench_process_wait_ctrl(const sc_string &var,int &var_wait_cycles,mc_wait_ctrl &var_wait_ctrl,tlm::tlm_fifo_put_if< mc_wait_ctrl > *ccs_wait_ctrl_fifo_if,const int var_capture_count,const int var_stopat) ;
   public:
      static void register_end_of_testbench_obj(mc_end_of_testbench* obj) ;
   public:
      void capture_Src_IN( ac_int<8, false > Src[76800]) ;
   public:
      void capture_Src( ac_int<8, false > Src[76800]) ;
   public:
      void capture_Dst_IN( ac_int<8, false > Dst[76800]) ;
   public:
      void capture_Dst( ac_int<8, false > Dst[76800]) ;
   public:
      void capture_Vga( ac_int<8, false > Vga[76800]) ;
   public:
      void capture_nbLevels(ac_int<3, false > nbLevels) ;
   protected:
      void wait_on_input_required() ;
   public:
      static void capture_IN( ac_int<8, false > Src[76800],  ac_int<8, false > Dst[76800],  ac_int<8, false > Vga[76800], ac_int<3, false > nbLevels) ;
   public:
      static void capture_OUT( ac_int<8, false > Src[76800],  ac_int<8, false > Dst[76800],  ac_int<8, false > Vga[76800], ac_int<3, false > nbLevels) ;
   public:
      static void exec_Main_Trans_Ond_Opt( ac_int<8, false > Src[76800],  ac_int<8, false > Dst[76800],  ac_int<8, false > Vga[76800], ac_int<3, false > nbLevels) ;
   protected:
      void end_of_simulation() ;
   public:
      void check_results() ;
   public:
      bool failed() ;
};
#endif
#endif
