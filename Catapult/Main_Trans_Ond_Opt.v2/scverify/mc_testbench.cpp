// ----------------------------------------------------------------------------
// SystemC Testbench Body
//
//    HLS version: 2011a.200 Production Release
//       HLS date: Mon Jun  2 22:10:04 PDT 2014
//  Flow Packages: HDL_Tcl 2008a.1, SCVerify 2009a.1
//
//   Generated by: xph3sle512@cimeld16
// Generated date: Tue Dec 13 10:28:16 CET 2016
//
// ----------------------------------------------------------------------------
// 
// -------------------------------------
// testbench
// User supplied testbench
// -------------------------------------
// 
#include "mc_testbench.h"
#include <mc_simulator_extensions.h>

testbench* testbench::that;
std::vector<mc_end_of_testbench*> testbench::_end_of_tb_objs;
bool testbench::Src_ignore;
bool testbench::Src_skip;
void mc_testbench_Src_skip(bool v) { testbench::Src_skip = v; }
int testbench::Src_array_comp_first;
int testbench::Src_array_comp_last;
int testbench::Src_IN_wait_cycles;
mc_wait_ctrl testbench::Src_IN_wait_ctrl;
bool testbench::Src_use_mask;
ac_int<8, false > testbench::Src_output_mask;
int testbench::Src_wait_cycles;
mc_wait_ctrl testbench::Src_wait_ctrl;
bool testbench::Dst_ignore;
bool testbench::Dst_skip;
void mc_testbench_Dst_skip(bool v) { testbench::Dst_skip = v; }
int testbench::Dst_array_comp_first;
int testbench::Dst_array_comp_last;
int testbench::Dst_IN_wait_cycles;
mc_wait_ctrl testbench::Dst_IN_wait_ctrl;
bool testbench::Dst_use_mask;
ac_int<8, false > testbench::Dst_output_mask;
int testbench::Dst_wait_cycles;
mc_wait_ctrl testbench::Dst_wait_ctrl;
bool testbench::Vga_ignore;
bool testbench::Vga_skip;
void mc_testbench_Vga_skip(bool v) { testbench::Vga_skip = v; }
int testbench::Vga_array_comp_first;
int testbench::Vga_array_comp_last;
bool testbench::Vga_use_mask;
ac_int<8, false > testbench::Vga_output_mask;
int testbench::Vga_wait_cycles;
mc_wait_ctrl testbench::Vga_wait_ctrl;
bool testbench::nbLevels_ignore;
bool testbench::nbLevels_skip;
void mc_testbench_nbLevels_skip(bool v) { testbench::nbLevels_skip = v; }
int testbench::nbLevels_array_comp_first;
int testbench::nbLevels_array_comp_last;
int testbench::nbLevels_wait_cycles;
mc_wait_ctrl testbench::nbLevels_wait_ctrl;
extern "C++" void Main_Trans_Ond_Opt( ac_int<8, false > Src[76800],  ac_int<8, false > Dst[76800],  ac_int<8, false > Vga[76800], ac_int<3, false > nbLevels);

// ============================================
// Function: mc_testbench_process_wait_ctrl
// --------------------------------------------

void testbench::mc_testbench_process_wait_ctrl(const sc_string &var,int &var_wait_cycles,mc_wait_ctrl &var_wait_ctrl,tlm::tlm_fifo_put_if< mc_wait_ctrl > *ccs_wait_ctrl_fifo_if,const int var_capture_count,const int var_stopat)
{
   if (var_wait_cycles) {
      // backward compatibility mode
      var_wait_ctrl.cycles = var_wait_cycles;
      var_wait_cycles = 0;
      std::ostringstream msg; msg.str("");
      msg << "Depricated use of '" << var << "_wait_cycles' variable. Use '" << var << "_wait_ctrl.cycles' instead.";
      SC_REPORT_WARNING("User testbench", msg.str().c_str());
   }
   if (var_wait_ctrl.cycles != 0) {
      var_wait_ctrl.iteration = var_capture_count;
      var_wait_ctrl.stopat = var_stopat;
      if (var_wait_ctrl.cycles < 0) {
         std::ostringstream msg; msg.str("");
         msg << "Ignoring negative value (" << var_wait_ctrl.cycles << ") for testbench control testbench::" << var << "_wait_ctrl.cycles.";
         SC_REPORT_WARNING("User testbench", msg.str().c_str());
         var_wait_ctrl.cycles = 0;
      }
      if (var_wait_ctrl.interval < 0) {
         std::ostringstream msg; msg.str("");
         msg << "Ignoring negative value (" << var_wait_ctrl.interval << ") for testbench control testbench::" << var << "_wait_ctrl.interval.";
         SC_REPORT_WARNING("User testbench", msg.str().c_str());
         var_wait_ctrl.interval = 0;
      }
      if (var_wait_ctrl.is_set()) {
         std::ostringstream msg; msg.str("");
         msg << "Captured wait_ctrl request " << var_wait_ctrl;
         SC_REPORT_INFO("User testbench", msg.str().c_str());
         ccs_wait_ctrl_fifo_if->put(var_wait_ctrl);
      }
   }
   var_wait_ctrl.clear(); // reset wait_ctrl
}
// ============================================
// Function: register_end_of_testbench_obj
// --------------------------------------------

void testbench::register_end_of_testbench_obj(mc_end_of_testbench* obj)
{
   _end_of_tb_objs.push_back(obj);
}
// ============================================
// Function: capture_Src_IN
// --------------------------------------------

void testbench::capture_Src_IN( ac_int<8, false > Src[76800])
{
   if (Src_IN_capture_count == wait_cnt)
      wait_on_input_required();
   if (_capture_Src_IN && !Src_ignore)
   {
      int cur_iter=Src_IN_iteration_count;
      ++Src_IN_iteration_count;
      mgc_sysc_ver_array1D<ac_int<8, false >,76800> Src_IN_tmp;
               int Src_linear_idx = 0;
               for (int Src_idx_0 = 0; Src_idx_0 < 76800; ++Src_idx_0)
                  Src_IN_tmp[Src_linear_idx++] = Src[Src_idx_0];
      ccs_Src_IN->put(Src_IN_tmp);
      ++Src_IN_capture_count;
      if (cur_iter < Src_IN_capture_count)
         mc_testbench_process_wait_ctrl("Src_IN",Src_IN_wait_cycles,Src_IN_wait_ctrl,ccs_wait_ctrl_Src_IN.operator->(),cur_iter,Src_IN_capture_count);
      Src_ignore = false;
   }
}
// ============================================
// Function: capture_Src
// --------------------------------------------

void testbench::capture_Src( ac_int<8, false > Src[76800])
{
   if (_capture_Src)
   {
      int cur_iter=Src_iteration_count;
      ++Src_iteration_count;
      mc_golden_info< mgc_sysc_ver_array1D<ac_int<8, false >,76800>, ac_int<8, false > > Src_tmp(Src_ignore, false, Src_iteration_count);
      Src_tmp._data.mc_testbench_process_array_bounds("Src",Src_array_comp_first,Src_array_comp_last,76799,0);
      // BEGIN: testbench output_mask control for field_name Src
      if ( Src_use_mask ) {
         Src_tmp._use_mask = true;
         Src_tmp._mask = Src_output_mask ;
      }
      // END: testbench output_mask control for field_name Src
               int Src_linear_idx = 0;
               for (int Src_idx_0 = 0; Src_idx_0 < 76800; ++Src_idx_0)
                  Src_tmp._data[Src_linear_idx++] = Src[Src_idx_0];
      if (!Src_skip) {
         Src_golden.put(Src_tmp);
         ++Src_capture_count;
      } else {
         std::ostringstream msg; msg.str("");
         msg << "Src_skip=true for iteration=" << Src_iteration_count << " @ " << sc_time_stamp();
         SC_REPORT_WARNING("User testbench", msg.str().c_str());
      }
      if (cur_iter < Src_capture_count)
         mc_testbench_process_wait_ctrl("Src",Src_wait_cycles,Src_wait_ctrl,ccs_wait_ctrl_Src.operator->(),cur_iter,Src_capture_count);
      Src_ignore = false;
      Src_use_mask = false;
   }
   Src_skip = false;
}
// ============================================
// Function: capture_Dst_IN
// --------------------------------------------

void testbench::capture_Dst_IN( ac_int<8, false > Dst[76800])
{
   if (Dst_IN_capture_count == wait_cnt)
      wait_on_input_required();
   if (_capture_Dst_IN && !Dst_ignore)
   {
      int cur_iter=Dst_IN_iteration_count;
      ++Dst_IN_iteration_count;
      mgc_sysc_ver_array1D<ac_int<8, false >,76800> Dst_IN_tmp;
               int Dst_linear_idx = 0;
               for (int Dst_idx_0 = 0; Dst_idx_0 < 76800; ++Dst_idx_0)
                  Dst_IN_tmp[Dst_linear_idx++] = Dst[Dst_idx_0];
      ccs_Dst_IN->put(Dst_IN_tmp);
      ++Dst_IN_capture_count;
      if (cur_iter < Dst_IN_capture_count)
         mc_testbench_process_wait_ctrl("Dst_IN",Dst_IN_wait_cycles,Dst_IN_wait_ctrl,ccs_wait_ctrl_Dst_IN.operator->(),cur_iter,Dst_IN_capture_count);
      Dst_ignore = false;
   }
}
// ============================================
// Function: capture_Dst
// --------------------------------------------

void testbench::capture_Dst( ac_int<8, false > Dst[76800])
{
   if (_capture_Dst)
   {
      int cur_iter=Dst_iteration_count;
      ++Dst_iteration_count;
      mc_golden_info< mgc_sysc_ver_array1D<ac_int<8, false >,76800>, ac_int<8, false > > Dst_tmp(Dst_ignore, false, Dst_iteration_count);
      Dst_tmp._data.mc_testbench_process_array_bounds("Dst",Dst_array_comp_first,Dst_array_comp_last,76799,0);
      // BEGIN: testbench output_mask control for field_name Dst
      if ( Dst_use_mask ) {
         Dst_tmp._use_mask = true;
         Dst_tmp._mask = Dst_output_mask ;
      }
      // END: testbench output_mask control for field_name Dst
               int Dst_linear_idx = 0;
               for (int Dst_idx_0 = 0; Dst_idx_0 < 76800; ++Dst_idx_0)
                  Dst_tmp._data[Dst_linear_idx++] = Dst[Dst_idx_0];
      if (!Dst_skip) {
         Dst_golden.put(Dst_tmp);
         ++Dst_capture_count;
      } else {
         std::ostringstream msg; msg.str("");
         msg << "Dst_skip=true for iteration=" << Dst_iteration_count << " @ " << sc_time_stamp();
         SC_REPORT_WARNING("User testbench", msg.str().c_str());
      }
      if (cur_iter < Dst_capture_count)
         mc_testbench_process_wait_ctrl("Dst",Dst_wait_cycles,Dst_wait_ctrl,ccs_wait_ctrl_Dst.operator->(),cur_iter,Dst_capture_count);
      Dst_ignore = false;
      Dst_use_mask = false;
   }
   Dst_skip = false;
}
// ============================================
// Function: capture_Vga
// --------------------------------------------

void testbench::capture_Vga( ac_int<8, false > Vga[76800])
{
   if (_capture_Vga)
   {
      int cur_iter=Vga_iteration_count;
      ++Vga_iteration_count;
      mc_golden_info< mgc_sysc_ver_array1D<ac_int<8, false >,76800>, ac_int<8, false > > Vga_tmp(Vga_ignore, false, Vga_iteration_count);
      Vga_tmp._data.mc_testbench_process_array_bounds("Vga",Vga_array_comp_first,Vga_array_comp_last,76799,0);
      // BEGIN: testbench output_mask control for field_name Vga
      if ( Vga_use_mask ) {
         Vga_tmp._use_mask = true;
         Vga_tmp._mask = Vga_output_mask ;
      }
      // END: testbench output_mask control for field_name Vga
               int Vga_linear_idx = 0;
               for (int Vga_idx_0 = 0; Vga_idx_0 < 76800; ++Vga_idx_0)
                  Vga_tmp._data[Vga_linear_idx++] = Vga[Vga_idx_0];
      if (!Vga_skip) {
         Vga_golden.put(Vga_tmp);
         ++Vga_capture_count;
      } else {
         std::ostringstream msg; msg.str("");
         msg << "Vga_skip=true for iteration=" << Vga_iteration_count << " @ " << sc_time_stamp();
         SC_REPORT_WARNING("User testbench", msg.str().c_str());
      }
      if (cur_iter < Vga_capture_count)
         mc_testbench_process_wait_ctrl("Vga",Vga_wait_cycles,Vga_wait_ctrl,ccs_wait_ctrl_Vga.operator->(),cur_iter,Vga_capture_count);
      Vga_ignore = false;
      Vga_use_mask = false;
   }
   Vga_skip = false;
}
// ============================================
// Function: capture_nbLevels
// --------------------------------------------

void testbench::capture_nbLevels(ac_int<3, false > nbLevels)
{
   if (nbLevels_capture_count == wait_cnt)
      wait_on_input_required();
   if (_capture_nbLevels && !nbLevels_ignore)
   {
      int cur_iter=nbLevels_iteration_count;
      ++nbLevels_iteration_count;
      ccs_nbLevels->put(nbLevels);
      ++nbLevels_capture_count;
      if (cur_iter < nbLevels_capture_count)
         mc_testbench_process_wait_ctrl("nbLevels",nbLevels_wait_cycles,nbLevels_wait_ctrl,ccs_wait_ctrl_nbLevels.operator->(),cur_iter,nbLevels_capture_count);
      nbLevels_ignore = false;
   }
}
// ============================================
// Function: wait_on_input_required
// --------------------------------------------

void testbench::wait_on_input_required()
{
   ++wait_cnt;
   wait(SC_ZERO_TIME); // get fifos a chance to update
   while (atleast_one_active_input) {
      if (_capture_Src_IN && ccs_Src_IN->used() == 0) return;
      if (_capture_Dst_IN && ccs_Dst_IN->used() == 0) return;
      if (_capture_nbLevels && ccs_nbLevels->used() == 0) return;
      that->cpp_testbench_active.write(false);
      wait(ccs_Src_IN->ok_to_put() | ccs_Dst_IN->ok_to_put() | ccs_nbLevels->ok_to_put());
      that->cpp_testbench_active.write(true);
   }
}
// ============================================
// Function: capture_IN
// --------------------------------------------

void testbench::capture_IN( ac_int<8, false > Src[76800],  ac_int<8, false > Dst[76800],  ac_int<8, false > Vga[76800], ac_int<3, false > nbLevels)
{
   that->capture_Src_IN(Src);
   that->capture_Dst_IN(Dst);
   that->capture_nbLevels(nbLevels);
}
// ============================================
// Function: capture_OUT
// --------------------------------------------

void testbench::capture_OUT( ac_int<8, false > Src[76800],  ac_int<8, false > Dst[76800],  ac_int<8, false > Vga[76800], ac_int<3, false > nbLevels)
{
   that->capture_Src(Src);
   that->capture_Dst(Dst);
   that->capture_Vga(Vga);
}
// ============================================
// Function: exec_Main_Trans_Ond_Opt
// --------------------------------------------

void testbench::exec_Main_Trans_Ond_Opt( ac_int<8, false > Src[76800],  ac_int<8, false > Dst[76800],  ac_int<8, false > Vga[76800], ac_int<3, false > nbLevels)
{
   that->cpp_testbench_active.write(true);
   capture_IN(Src, Dst, Vga, nbLevels);
   Main_Trans_Ond_Opt(Src, Dst, Vga, nbLevels);
   // throttle ac_channel based on number of calls to chan::size() or chan::empty() or chan::nb_read() (but not chan::available()) 
   if (1) {
      int cnt=0;
      if (cnt) std::cout << "mc_testbench.cpp: CONTINUES @ " << sc_time_stamp() << std::endl;
      if (cnt) that->cpp_testbench_active.write(true);
   }
   capture_OUT(Src, Dst, Vga, nbLevels);
}
// ============================================
// Function: end_of_simulation
// --------------------------------------------

void testbench::end_of_simulation()
{
   if (!_checked_results) {
      SC_REPORT_INFO(name(), "Simulation ran into deadlock");
      check_results();
   }
}
// ============================================
// Function: check_results
// --------------------------------------------

void testbench::check_results()
{
   for (std::vector<mc_end_of_testbench*>::iterator i = _end_of_tb_objs.begin(); i != _end_of_tb_objs.end(); ++i)
      (*i)->end_of_testbench();
   
   _checked_results = true;
   cout<<endl;
   cout<<"Checking results"<<endl;
   _failed = false;
   if (main_exit_code) _failed = true;
   int _num_outputs_checked = 0;
   
   if (!_capture_Src) {
      cout<<"'Src' - warning, output was optimized away"<<endl;
   } else {
      _num_outputs_checked++;
      cout<<"'Src'"<<endl;
      cout<<"   capture count        = "<<Src_capture_count<<endl;
      cout<<"   comparison count     = "<<Src_comp->get_compare_count();
      if (Src_comp->get_partial_compare_count()) 
         cout <<" ("<<Src_comp->get_partial_compare_count()<<" partial)";
      if (Src_comp->get_mask_compare_count()) 
         cout <<" ("<<Src_comp->get_mask_compare_count()<<" masked)";
      cout << endl;
      cout<<"   ignore count         = "<<Src_comp->get_ignore_count()<<endl;
      cout<<"   error count          = "<<Src_comp->get_error_count()<<endl;
      cout<<"   stuck in dut fifo    = "<<ccs_Src->used()<<endl;
      cout<<"   stuck in golden fifo = "<<Src_golden.used()<<endl;
      if (Src_comp->get_error_count() > 0) cout << "   Error: output 'Src' had comparison errors"<<endl;
      if (Src_comp->get_compare_count() < Src_capture_count) cout << "   Error: output 'Src' has incomplete comparisons"<<endl;
      if (Src_capture_count == 0) cout << "   Error: output 'Src' has no golden values to compare against"<<endl;
      _failed = _failed || Src_comp->get_error_count() > 0;
      _failed = _failed || Src_comp->get_compare_count() < Src_capture_count;
      _failed = _failed || Src_capture_count == 0;
      cout<<endl;
   }
   if (!_capture_Dst) {
      cout<<"'Dst' - warning, output was optimized away"<<endl;
   } else {
      _num_outputs_checked++;
      cout<<"'Dst'"<<endl;
      cout<<"   capture count        = "<<Dst_capture_count<<endl;
      cout<<"   comparison count     = "<<Dst_comp->get_compare_count();
      if (Dst_comp->get_partial_compare_count()) 
         cout <<" ("<<Dst_comp->get_partial_compare_count()<<" partial)";
      if (Dst_comp->get_mask_compare_count()) 
         cout <<" ("<<Dst_comp->get_mask_compare_count()<<" masked)";
      cout << endl;
      cout<<"   ignore count         = "<<Dst_comp->get_ignore_count()<<endl;
      cout<<"   error count          = "<<Dst_comp->get_error_count()<<endl;
      cout<<"   stuck in dut fifo    = "<<ccs_Dst->used()<<endl;
      cout<<"   stuck in golden fifo = "<<Dst_golden.used()<<endl;
      if (Dst_comp->get_error_count() > 0) cout << "   Error: output 'Dst' had comparison errors"<<endl;
      if (Dst_comp->get_compare_count() < Dst_capture_count) cout << "   Error: output 'Dst' has incomplete comparisons"<<endl;
      if (Dst_capture_count == 0) cout << "   Error: output 'Dst' has no golden values to compare against"<<endl;
      _failed = _failed || Dst_comp->get_error_count() > 0;
      _failed = _failed || Dst_comp->get_compare_count() < Dst_capture_count;
      _failed = _failed || Dst_capture_count == 0;
      cout<<endl;
   }
   if (!_capture_Vga) {
      cout<<"'Vga' - warning, output was optimized away"<<endl;
   } else {
      _num_outputs_checked++;
      cout<<"'Vga'"<<endl;
      cout<<"   capture count        = "<<Vga_capture_count<<endl;
      cout<<"   comparison count     = "<<Vga_comp->get_compare_count();
      if (Vga_comp->get_partial_compare_count()) 
         cout <<" ("<<Vga_comp->get_partial_compare_count()<<" partial)";
      if (Vga_comp->get_mask_compare_count()) 
         cout <<" ("<<Vga_comp->get_mask_compare_count()<<" masked)";
      cout << endl;
      cout<<"   ignore count         = "<<Vga_comp->get_ignore_count()<<endl;
      cout<<"   error count          = "<<Vga_comp->get_error_count()<<endl;
      cout<<"   stuck in dut fifo    = "<<ccs_Vga->used()<<endl;
      cout<<"   stuck in golden fifo = "<<Vga_golden.used()<<endl;
      if (Vga_comp->get_error_count() > 0) cout << "   Error: output 'Vga' had comparison errors"<<endl;
      if (Vga_comp->get_compare_count() < Vga_capture_count) cout << "   Error: output 'Vga' has incomplete comparisons"<<endl;
      if (Vga_capture_count == 0) cout << "   Error: output 'Vga' has no golden values to compare against"<<endl;
      _failed = _failed || Vga_comp->get_error_count() > 0;
      _failed = _failed || Vga_comp->get_compare_count() < Vga_capture_count;
      _failed = _failed || Vga_capture_count == 0;
      cout<<endl;
   }
   cout<<endl;
   if (_num_outputs_checked == 0) {
      cout<<"Error: All outputs were optimized away. No output values were compared."<<endl;
      _failed = _failed || (_num_outputs_checked == 0);
   }
   if (main_exit_code) cout << "Error: C++ Testbench 'main()' returned a non-zero exit code ("<<main_exit_code<<"). Check your testbench." <<endl;
   cout<<(_failed ? "Error: ":"Info: ")<<"Simulation "<<(_failed ? "FAILED":"PASSED")<<" @ "<<sc_time_stamp()<<endl;
}
// ============================================
// Function: failed
// --------------------------------------------

bool testbench::failed()
{
   return _failed;
}
// ---------------------------------------------------------------
// Process: SC_METHOD wait_for_end
// Static sensitivity: sensitive << clk.pos() << testbench_end_event;

void testbench::wait_for_end() {
   // If run() has not finished, we do nothing here
   if (!testbench_ended) return;
   // check for completed outputs
   if (Src_comp->get_compare_count() < Src_capture_count) {testbench_end_event.notify(1,SC_NS); return;}
   if (Dst_comp->get_compare_count() < Dst_capture_count) {testbench_end_event.notify(1,SC_NS); return;}
   if (Vga_comp->get_compare_count() < Vga_capture_count) {testbench_end_event.notify(1,SC_NS); return;}
   // If we made it here, all outputs have flushed. Check the results
   SC_REPORT_INFO(name(), "Simulation completed");
   check_results();
   sc_stop();
}
// ---------------------------------------------------------------
// Process: SC_THREAD run
// Static sensitivity: 

void testbench::run() {
   Src_ignore = false;
   Src_skip = false;
   Src_array_comp_first = -1;
   Src_array_comp_last = -1;
   Src_IN_wait_cycles = 0;
   Src_IN_wait_ctrl.clear();
   Src_IN_capture_count = 0;
   Src_IN_iteration_count = 0;
   Src_use_mask = false;
   Src_output_mask = ~0;
   Src_wait_cycles = 0;
   Src_wait_ctrl.clear();
   Src_capture_count = 0;
   Src_iteration_count = 0;
   Dst_ignore = false;
   Dst_skip = false;
   Dst_array_comp_first = -1;
   Dst_array_comp_last = -1;
   Dst_IN_wait_cycles = 0;
   Dst_IN_wait_ctrl.clear();
   Dst_IN_capture_count = 0;
   Dst_IN_iteration_count = 0;
   Dst_use_mask = false;
   Dst_output_mask = ~0;
   Dst_wait_cycles = 0;
   Dst_wait_ctrl.clear();
   Dst_capture_count = 0;
   Dst_iteration_count = 0;
   Vga_ignore = false;
   Vga_skip = false;
   Vga_array_comp_first = -1;
   Vga_array_comp_last = -1;
   Vga_use_mask = false;
   Vga_output_mask = ~0;
   Vga_wait_cycles = 0;
   Vga_wait_ctrl.clear();
   Vga_capture_count = 0;
   Vga_iteration_count = 0;
   nbLevels_ignore = false;
   nbLevels_skip = false;
   nbLevels_array_comp_first = -1;
   nbLevels_array_comp_last = -1;
   nbLevels_wait_cycles = 0;
   nbLevels_wait_ctrl.clear();
   nbLevels_capture_count = 0;
   nbLevels_iteration_count = 0;
   main_exit_code = main();
   cout<<"Info: Execution of user-supplied C++ testbench 'main()' has completed with exit code = " << main_exit_code << endl;
   cout<<endl;
   cout<<"Info: Collecting data completed"<<endl;
   cout<<"   captured "<<Src_IN_capture_count<<" values of Src_IN"<<endl;
   cout<<"   captured "<<Src_capture_count<<" values of Src"<<endl;
   cout<<"   captured "<<Dst_IN_capture_count<<" values of Dst_IN"<<endl;
   cout<<"   captured "<<Dst_capture_count<<" values of Dst"<<endl;
   cout<<"   captured "<<Vga_capture_count<<" values of Vga"<<endl;
   cout<<"   captured "<<nbLevels_capture_count<<" values of nbLevels"<<endl;
   testbench_ended = true;
   testbench_end_event.notify(SC_ZERO_TIME);
}
